#pragma checksum "D:\mycode\NetCore代码生成器\lym-netcore-web-api-template\Lym.Mvc.Admin\Views\FileProjectType\List.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "62161d2e6c8ed5f14c917b774a4abb6851127a07"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_FileProjectType_List), @"mvc.1.0.view", @"/Views/FileProjectType/List.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\mycode\NetCore代码生成器\lym-netcore-web-api-template\Lym.Mvc.Admin\Views\FileProjectType\List.cshtml"
using Lym.Models.Entity.Codegenerate;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"62161d2e6c8ed5f14c917b774a4abb6851127a07", @"/Views/FileProjectType/List.cshtml")]
    public class Views_FileProjectType_List : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\mycode\NetCore代码生成器\lym-netcore-web-api-template\Lym.Mvc.Admin\Views\FileProjectType\List.cshtml"
  
    ViewData["Title"] = "项目类型管理";
    Layout = "~/Views/_main.cshtml";

    var fileProjects = ViewBag.fileProjects as List<FileProject>;

#line default
#line hidden
#nullable disable
            WriteLiteral("<div class=\"layui-fluid\">\r\n    <div class=\"layui-card\">\r\n");
            WriteLiteral(@"        <div class=""layui-form layui-card-header layuiadmin-card-header-auto"">
            <div class=""layui-form-item"">
                <div class=""layui-inline"">
                    <label class=""layui-form-label"">项目</label>
                    <div class=""layui-input-inline"">
                        <select name=""projectId"" id=""projectId"">
");
            WriteLiteral("                                <option value=\"0\">全部</option>\r\n");
#nullable restore
#line 19 "D:\mycode\NetCore代码生成器\lym-netcore-web-api-template\Lym.Mvc.Admin\Views\FileProjectType\List.cshtml"
                                foreach (var item in fileProjects)
                                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                    <option");
            BeginWriteAttribute("value", " value=\"", 857, "\"", 873, 1);
#nullable restore
#line 21 "D:\mycode\NetCore代码生成器\lym-netcore-web-api-template\Lym.Mvc.Admin\Views\FileProjectType\List.cshtml"
WriteAttributeValue("", 865, item.Id, 865, 8, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">");
#nullable restore
#line 21 "D:\mycode\NetCore代码生成器\lym-netcore-web-api-template\Lym.Mvc.Admin\Views\FileProjectType\List.cshtml"
                                                        Write(item.ProjectName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</option>\r\n");
#nullable restore
#line 22 "D:\mycode\NetCore代码生成器\lym-netcore-web-api-template\Lym.Mvc.Admin\Views\FileProjectType\List.cshtml"
                                }
                            

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                        </select>
                    </div>
                </div>
                <div class=""layui-inline"">
                    <label class=""layui-form-label"">项目类型名称</label>
                    <div class=""layui-input-inline"">
                        <input type=""text"" name=""projectTypeName"" id=""projectTypeName""");
            BeginWriteAttribute("value", " value=\"", 1308, "\"", 1316, 0);
            EndWriteAttribute();
            WriteLiteral(@" placeholder=""项目类型名称"" autocomplete=""off"" class=""layui-input"">
                    </div>
                </div>
                <div class=""layui-inline"">
                    <button class=""layui-btn"" id=""btnsearch"" type=""button"" data-type=""reload"">查找</button>
                </div>
            </div>

        </div>

        <div class=""layui-card-body"">
            <script type=""text/html"" id=""toolbarDemo"">
                <div class=""layui-btn-container"">
                    <div class=""layui-btn layui-btn-primary layui-btn-xs"" lay-event=""add""><i class=""layui-icon layui-icon-add-1""></i>新增</div>
                    <div class=""layui-btn layui-btn-primary layui-btn-xs"" lay-event=""edit""><i class=""layui-icon layui-icon-edit""></i>修改</div>
                    <div class=""layui-btn layui-btn-primary layui-btn-xs"" lay-event=""del""><i class=""layui-icon layui-icon-delete""></i>删除</div>
                </div>
            </script>
            <table id=""tb1"" class=""layui-table"" lay-filter=""tb1""></tabl");
            WriteLiteral("e>\r\n");
            WriteLiteral("        </div>\r\n\r\n    </div>\r\n</div>\r\n<input id=\"status\" type=\"hidden\" />\r\n");
            DefineSection("js", async() => {
                WriteLiteral("\r\n    <script>\r\n        layui.config({\r\n            base: \'");
#nullable restore
#line 62 "D:\mycode\NetCore代码生成器\lym-netcore-web-api-template\Lym.Mvc.Admin\Views\FileProjectType\List.cshtml"
              Write(Url.Content("~/"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' //静态资源所在路径
        }).extend({
            index: 'lib/index'//主入口模块
            }).use(['index', 'table', ""laydate""], function () {
            var $ = layui.$
                , table = layui.table
                , layer = layui.layer
                , laydate = layui.laydate;

            var dataInfo = table.render({
                elem: '#tb1'
                , url: """);
#nullable restore
#line 73 "D:\mycode\NetCore代码生成器\lym-netcore-web-api-template\Lym.Mvc.Admin\Views\FileProjectType\List.cshtml"
                   Write(Url.Action("GetProjectList", "FileProjectType"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"""
                , limit: 20
                , limits: [20, 40, 60, 80, 100, 500, 1000]
                , done: function (res, curr, count) {
                    //如果是异步请求数据方式，res即为你接口返回的信息。
                    //如果是直接赋值的方式，res即为：{data: [], count: 99} data为当前页数据、count为数据总长度
                    //得到当前页码
                    //console.log(curr);
                    //得到数据总量
                    //console.log(count);
                }
                , totalRow: true
                , toolbar: '#toolbarDemo'//
                , defaultToolbar: ['filter', 'print', 'exports']
                , title: '数据库列表'
                , height: 'full-138'
                , cols: [[
                    { type: 'checkbox' },
                    { title: '序号', type: 'numbers' , }
                    , { field: 'id', width: 80, title: 'ID', sort: true, align: 'center', hide: true }
                    , { field: 'projectTypeName', width: 320, title: '项目类型名称' }
                    , { field: 'fileProjectId', w");
                WriteLiteral(@"idth: 120, title: '项目ID' }
                ]]
                , page: {
                    theme: '#a70000', first: '首页'
                    , last: '尾页'
                }
            });

            active = {
                reload: function () {
                    var projectTypeName = $(""#projectTypeName"").val();
                    var projectId = $(""#projectId"").val();
                    table.reload('tb1', {
                        page: { curr: 1 }
                        , where: {
                            projectId: projectId,
                            projectTypeName: projectTypeName,
                        }
                    }, 'data');
                }
            };

                //监听头工具栏事件
            table.on('toolbar(tb1)', function (obj) {
                    var checkStatus = table.checkStatus(obj.config.id)
                        , data = checkStatus.data; //获取选中的数据
                    switch (obj.event) {
                        case 'add':
  ");
                WriteLiteral(@"                          //layer.msg('添加');
                            add();
                            break;
                        case 'edit':
                            if (data.length === 0) {
                                layer.msg('请选择一行');
                            } else if (data.length > 1) {
                                layer.msg('只能同时编辑一个');
                            } else {
                                //layer.alert('编辑 [id]：' + checkStatus.data[0].uid);
                                edit(checkStatus.data[0].id);
                            }
                            break;
                        case 'del':
                            if (data.length === 0) {
                                layer.msg('请选择一行');
                            } else {

                                layer.confirm('真的删除行么', function (index) {
                                    layer.close(index);
                                    //向服务端发送删除指令
                         ");
                WriteLiteral(@"           del(index,checkStatus.data[0].id);
                                });
                            }
                            break;
                    };
            });

            $('#searchbtn').on('click', function () {
                var type = $(this).data('type');
                active[type] ? active[type].call(this) : '';
            });
             //新增
            function add() {
                var url = '");
#nullable restore
#line 156 "D:\mycode\NetCore代码生成器\lym-netcore-web-api-template\Lym.Mvc.Admin\Views\FileProjectType\List.cshtml"
                      Write(Url.Action("Add", "FileProjectType"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
                var index =layui.layer.open({
                    type: 2,
                    area: ['80%', '60%'],
                    content: url,
                    cancel: function (index, layero) {
                        layer.close(index);
                        return false;
                    },
                    end: function () {
                        if ($(""#status"").val() == 0) {
                            dataInfo.reload();
                            $(""#status"").val(-100);
                        }
                    }
                });
                layer.full(index);
            }
            //编辑
            function edit(id) {
                var url = '");
#nullable restore
#line 176 "D:\mycode\NetCore代码生成器\lym-netcore-web-api-template\Lym.Mvc.Admin\Views\FileProjectType\List.cshtml"
                      Write(Url.Action("Edit", "FileProjectType"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' + '?Id=' + id;
               var index= layui.layer.open({
                    type: 2,
                    area: ['80%', '60%'],
                    content: url,
                    cancel: function (index, layero) {
                        layer.close(index);
                        return false;
                    },
                    end: function () {
                        if ($(""#status"").val() == 0) {
                            dataInfo.reload();
                            $(""#status"").val(-100);
                        }
                    }
               });
               layer.full(index);
            }
            //删除
            function del(index,id) {
                var url = '");
#nullable restore
#line 196 "D:\mycode\NetCore代码生成器\lym-netcore-web-api-template\Lym.Mvc.Admin\Views\FileProjectType\List.cshtml"
                      Write(Url.Action("Del", "FileProjectType"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' + '?Id=' + id;
                $.getJSON(url, function (result) {
                    $(""#status"").val(result.code);
                    returnBackMsg(index, result, ""记录删除"");
                    if ($(""#status"").val() === '0') {
                        dataInfo.reload();
                        $(""#status"").val(-100);
                    }
                });
            }

                $('#btnsearch').on('click', function () {
                    var type = $(this).data('type');
                    active[type] ? active[type].call(this) : '';
                });
        });

        // result{data,msg,code} action 0 添加，1 修改
        function returnBackMsg(index, result, action) {
            layer.close(index);
            var code = 0;
            var status = """";
            if (result.code == 0) {
                code = 6;
                status = ""成功"";
            }
            else {
                code = 5;
                status = ""失败"";
            }
            laye");
                WriteLiteral("r.msg(action + status, { icon: code });\r\n        }\r\n    </script>\r\n");
            }
            );
            WriteLiteral("\r\n\r\n\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
